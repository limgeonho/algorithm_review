1. OOP => o
2. RESTful => o
3. RDBMS, NOSQL => o
4. Spring

[OOP]

--OOP
-객체들이 서로 유기적으로 동작하는 프로그래밍 이론
-코드의 재사용성과 중복제거가 가장 큰 목적

--추상화
-목적과 관련이 없는 부분을 제외해서 필요한 부분을 포착하는 기법
-객체의 공통된 속성들 중 필요한 부분을 포착해서 클래스로 정의하는 설계 기법
-추상화는 실제 세상을 객체화하는게 아니라 필요한 정보만을 중심으로 간소화하는것을 의미한다. 실제 지형도보다 지하철역간의 상대위치가 중요하게 정리된 지하철 노선도가 추상화의 대표적인 예이다.
- 프로그래밍 언어에서는 객체들의 공통적인 속성과 기능을 중심으로 추상화한다.

--캡슐화
-외부에 노출할 필요가 없는 정보들은 은닉 (정보은닉)
-추상화를 통해 객체를 정의했다면, 객체에 필요한 데이터나 기능(메소드)을 책임이 있는 객체에 그룹화시켜주는 것을 캡슐화(Capsulation)이라 한다.

--상속
-상속 관계에 있는 두 클래스에 대해, 부모 클래스가 자손 클래스에게 속성을 물려주는 것
-코드의 재사용이 목적

--다형성
-같은 형태이지만 다른 기능을 하는 것
-오버라이딩은 이와 관련된 기능임
-객체지향을 공부하면서 위의 특징들을 종합하는, 가장 중요한 특징이라고 생각했던 부분이다. 객체지향은 객체간 관계를 디자인하는 프로그래밍인데, 다형성은 이 객체간 관계를 유연하게 해주는 특징이다.

[RESTful]
https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html

[RDBMS, NOSQL]
https://khj93.tistory.com/entry/Database-RDBMS%EC%99%80-NOSQL-%EC%B0%A8%EC%9D%B4%EC%A0%90

ssss