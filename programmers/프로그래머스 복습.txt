[프로그래머스 레벨1]
- rjust, ljust, join 함수
- 연산횟수가 정해져 있으면 for문의 최대값으로 제한(0.XX)
- 소수인지 판별은 n % 1 == 0 이면 소수!
- 리스트 뒤집기 list.reverse() or arr[::-1] + 슬라이싱
- list.sort() or sorted(list) / list자체를 바꿈 or 바뀐 리스트를 반환 <= 변수에 저장해줘야함
- ''.join(list) => 문자열로 나옴
- map(function, iterable)
- isalpha(), isdigit(), isalnum()
- 알파벳을 숫자로 ord / 숫자를 알파벳으로 chr
- 리스트에서 원하는 요소를 찾을때 list.index("찾는 요소")
- f-string => f'{변수} 입니다.'
- for 문 멈추기 => break / for 문 건너 뛰기 => continue
- len(s) in (4, 6) => s의 길이가 4나 6이라는 숫자에 포함되어 있나?
- answer = ''.join(sorted(s, reverse=True)) => s라는 리스트를 거꾸로 정렬
- sorted(a, key=lambda x:x[0])
- 문자열에서 특정 문자 세기 => cnt = strings.count('letter')
- sum(range(3, 6)) => 3부터 5까지 숫자의 합을 계산해서 return
- list에서 문자 뽑기 => list.pop() => 마지막 원소
- combinations 사용하기 => list(combinations(arr, 2))
- set에 넣기 => set(arr)
- for idx, value in enumerate(list):
- for p, c in zip(participant, completion) => participant, completion의 리스트를 빼고 각각의 p, c로 뽑아냄
- zip은 서로 다른 리스트를 동시에 깔때 사용하면 좋음
- Counter은 list에 넣어서 반환해야 사용할 수 있음 => list(Counter(arr).keys())[0]
- list에서 특정 value의 개수를 찾는 방법 => list.count("value")


[프로그래머스 레벨2]
- s.split() => 하면 리스트로 반환된다
- s.split()할때 s.split(' ')로 해야 중복된 ' '을 무시하지 않음
- s.capitalize() vs s.title() => capitalize()는 문자열 전체 중 첫 글자만 / title()는 단어마다 + 첫 문자적용(첫 글자가 숫자면 두 번째 문자를 대문자로)
- 행렬의 곱셈 암기 하기
- max(land[i-1][:j] + land[i-1][j+1:]) => 리스트 + 리스트는 리스트로 나옴, 그 중에서 최대 값
- 기록용으로 list를 만들어서 append와 pop으로 관리하는 방법도 좋음
- 리스트의 pop(0)을 하면 첫 문자를 뽑고 return 함 => list.pop(0) => list의 첫 문자 return
- 2차원 리스트 => 1차원 리스트로 바꿀 수 있음 => for i in range(n**2): + x = i // n, y = i % n
- 중복순열 => list(product, repeat = 원하는 개수) 
- 원하는 원소의 위치 찾기 => list.index('찾고자 하는 value')
- 확실하게 그냥 list.pop(0)보다 deque.popleft()가 빠르다!! => 앞에서 원소 뽑을 일 있으면 deque사용하자
- rfind(), find() => 일반적인 find는 왼쪽부터 찾아간다 하지만 rfind()는 오른쪽부터 찾기 시작함
- bin() => 2진수 문자열로 바꿔줌
- 리스트를 복사하는 방법 => 왜? 리스트는 arr1 = arr2하면 arr2의 주소가 복사되기 때문에 arr1과 arr2가 같은 리스트를 공유한다
		         => 따라서, arr1 = arr2[:]로 복사한다.  

===========================================
[프로그래머스 복습할 문제]
- 숫자의 표현 -> 시간초과 났었음 -> 특정 조건 하에서 반복한다면 while문 => O
- 가장 큰 정사각형 찾기 -> 2차원 리스트안에서 또 다른 정사각형 탐색? -> dp를 생각해보자 => O
- 방문 길이 -> 좌표상에서 움직인 선분의 길이 -> set을 활용해서 지나온 길의 좌표를 넣어준다(이때, 양방향으로 넣는다) => O(중복처리는 set활용!)
===========================================
- 스킬트리 -> list.pop(0)
- 점프와 순간이동 -> 원하는 목적지(값)로 가기 위해서는 bottom-up보다 top-down이 편한 경우도 생각
- n*2배열 자르기 -> 2차원 리스트를 1차원으로 계산하기 (row major order사용 + 필요한 부분만)
- 전력망 둘로 나누기 
===========================================
모음사전 -> 중복순열을 이용(perm_with or product) => list(product, repeat = 원하는 개수) + 리스트에서 원하는 value의 인덱스
구명보트 -> 문제 잘 읽기
===========================================
영어 끝말잇기 -> 조건에 맞게 잘 분기처리만 하면됨
===========================================
2개 이하로 다른 비트 -> 단순 구현으로 하면 에러남

